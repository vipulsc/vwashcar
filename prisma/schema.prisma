generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  role          UserRole
  loginId       String?   @unique
  password      String?
  lastLogin     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  adminSites    Site[]    @relation("SiteAdmin")
  salesmanSites Site[]    @relation("SiteSalesman")

  @@map("users")
}

model Site {
  id        String        @id @default(cuid())
  name      String
  location  String
  status    SiteStatus    @default(ACTIVE)
  isActive  Boolean       @default(true)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  adminId   String?
  bookings  Booking[]
  revenue   SiteRevenue[]
  admin     User?         @relation("SiteAdmin", fields: [adminId], references: [id])
  salesmen  User[]        @relation("SiteSalesman")

  @@map("sites")
}

model Service {
  id          String           @id @default(cuid())
  name        String
  type        ServiceType
  description String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  bookings    BookingService[]
  pricing     ServicePricing[]
  revenue     ServiceRevenue[]

  @@map("services")
}

model ServicePricing {
  id          String      @id @default(cuid())
  serviceId   String
  vehicleType VehicleType
  price       Decimal     @db.Decimal(10, 2)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  service     Service     @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([serviceId, vehicleType])
  @@map("service_pricing")
}

model Booking {
  id            String           @id @default(cuid())
  bookingId     String           @unique
  plateNumber   String
  vehicleType   VehicleType
  phoneNumber   String?
  status        BookingStatus    @default(WAITING)
  paymentMethod PaymentMethod?
  arrivalTime   DateTime         @default(now())
  startTime     DateTime?
  completedTime DateTime?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  siteId        String
  services      BookingService[]
  site          Site             @relation(fields: [siteId], references: [id])

  @@map("bookings")
}

model BookingService {
  id        String   @id @default(cuid())
  bookingId String
  serviceId String
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  booking   Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  service   Service  @relation(fields: [serviceId], references: [id])

  @@unique([bookingId, serviceId])
  @@map("booking_services")
}

model FamilyFriend {
  id          String   @id @default(cuid())
  phoneNumber String   @unique
  name        String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("family_friends")
}

model SiteRevenue {
  id           String   @id @default(cuid())
  siteId       String
  date         DateTime @db.Date
  totalRevenue Decimal  @default(0) @db.Decimal(12, 2)
  cashRevenue  Decimal  @default(0) @db.Decimal(12, 2)
  cardRevenue  Decimal  @default(0) @db.Decimal(12, 2)
  totalCars    Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  site         Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@unique([siteId, date])
  @@map("site_revenue")
}

model ServiceRevenue {
  id           String   @id @default(cuid())
  serviceId    String
  date         DateTime @db.Date
  totalRevenue Decimal  @default(0) @db.Decimal(12, 2)
  cashRevenue  Decimal  @default(0) @db.Decimal(12, 2)
  cardRevenue  Decimal  @default(0) @db.Decimal(12, 2)
  usageCount   Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  service      Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([serviceId, date])
  @@map("service_revenue")
}

model UniqueCar {
  id          String   @id @default(cuid())
  plateNumber String   @unique
  visitCount  Int      @default(1)
  firstVisit  DateTime @default(now())
  lastVisit   DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("unique_cars")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  SALESMAN
}

enum SiteStatus {
  ACTIVE
  INACTIVE
}

enum ServiceType {
  PACKAGE
  ADDON
}

enum VehicleType {
  SEDAN
  SUV
  FOUR_BY_FOUR
  PICKUP
  MOTORCYCLE
  OTHER
}

enum BookingStatus {
  WAITING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PaymentMethod {
  CASH
  CARD
}
