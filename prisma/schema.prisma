// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
enum UserRole {
  SUPER_ADMIN
  ADMIN
  SALESMAN
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  role      UserRole
  loginId   String?  @unique
  password  String?  // Hashed password
  lastLogin DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  adminSites        Site[]           @relation("SiteAdmin")
  salesmanSites     Site[]           @relation("SiteSalesman")

  @@map("users")
}

// Site Management
enum SiteStatus {
  ACTIVE
  INACTIVE
}

model Site {
  id        String     @id @default(cuid())
  name      String
  location  String
  status    SiteStatus @default(ACTIVE)
  isActive  Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  adminId   String?
  admin     User?   @relation("SiteAdmin", fields: [adminId], references: [id])
  salesmen  User[]  @relation("SiteSalesman")
  bookings  Booking[]
  revenue   SiteRevenue[]

  @@map("sites")
}

// Service Management
enum ServiceType {
  PACKAGE
  ADDON
}

model Service {
  id          String      @id @default(cuid())
  name        String
  type        ServiceType
  description String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  pricing     ServicePricing[]
  bookings    BookingService[]
  revenue     ServiceRevenue[]

  @@map("services")
}

model ServicePricing {
  id        String @id @default(cuid())
  serviceId String
  vehicleType VehicleType
  price     Decimal @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([serviceId, vehicleType])
  @@map("service_pricing")
}

// Vehicle Types
enum VehicleType {
  SEDAN
  SUV
  FOUR_BY_FOUR
  PICKUP
  MOTORCYCLE
  OTHER
}

// Booking Management
enum BookingStatus {
  WAITING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PaymentMethod {
  CASH
  CARD
}

model Booking {
  id            String        @id @default(cuid())
  bookingId     String        @unique // Human readable ID like CW12345678
  plateNumber   String
  vehicleType   VehicleType
  phoneNumber   String?
  status        BookingStatus @default(WAITING)
  paymentMethod PaymentMethod?
  
  // Timestamps
  arrivalTime   DateTime      @default(now())
  startTime     DateTime?
  completedTime DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  siteId        String
  site          Site          @relation(fields: [siteId], references: [id])
  
  services      BookingService[]

  @@map("bookings")
}

model BookingService {
  id        String @id @default(cuid())
  bookingId String
  serviceId String
  price     Decimal @db.Decimal(10, 2)
  createdAt DateTime @default(now())

  // Relations
  booking   Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  service   Service @relation(fields: [serviceId], references: [id])

  @@unique([bookingId, serviceId])
  @@map("booking_services")
}

// Family & Friends - Free Service
model FamilyFriend {
  id          String   @id @default(cuid())
  phoneNumber String   @unique
  name        String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("family_friends")
}

// Revenue Tracking
model SiteRevenue {
  id        String   @id @default(cuid())
  siteId    String
  date      DateTime @db.Date
  totalRevenue Decimal @db.Decimal(12, 2) @default(0)
  cashRevenue Decimal @db.Decimal(12, 2) @default(0)
  cardRevenue Decimal @db.Decimal(12, 2) @default(0)
  totalCars Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  site      Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@unique([siteId, date])
  @@map("site_revenue")
}

model ServiceRevenue {
  id        String   @id @default(cuid())
  serviceId String
  date      DateTime @db.Date
  totalRevenue Decimal @db.Decimal(12, 2) @default(0)
  cashRevenue Decimal @db.Decimal(12, 2) @default(0)
  cardRevenue Decimal @db.Decimal(12, 2) @default(0)
  usageCount Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  service   Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([serviceId, date])
  @@map("service_revenue")
}

// Unique Car Counter
model UniqueCar {
  id          String   @id @default(cuid())
  plateNumber String   @unique
  visitCount  Int      @default(1)
  firstVisit  DateTime @default(now())
  lastVisit   DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@map("unique_cars")
}